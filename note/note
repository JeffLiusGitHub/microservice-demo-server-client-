Important Note Regarding Node v17
Currently, there is a critical bug in many libraries such as Webpack and Create React App caused by the release of Node v17.

https://github.com/facebook/create-react-app/issues/11562 (still unresolved)

https://github.com/webpack/webpack/issues/14532 (currently resolved)

To move forward, you should use the LTS v16 version of Node until the bug has been officially addressed. In general, we always recommend the use of the LTS version to avoid bugs such as this.

The workaround mentioned to add the --openssl-legacy-provider flag may not be appropriate for all situations, and is not a long-term solution. Based on discussion in the official issues thread, this may not be fully addressed until CRA v5 is released.

When creating your Dockerfiles in the next lecture, modify the FROM instruction to use the v16 version of Node Alpine:

FROM node:16-alpine

//

Warning on Docker Desktop for Linux
In the upcoming lecture, we will be discussing the installation of Kubernetes. This note is a warning for students who have natively installed a Linux OS and are attempting to use Docker Desktop. This does not pertain to students running Linux with Windows WSL.

Docker Desktop for Linux is just out of beta and has proven to be very buggy. It appears that it is also having issues working at all with Skaffold and syncing.

For these reasons, we do not recommend using it until it is more stable. Minikube has been the standard solution for running Kubernetes on Linux for many years, so, that would be our recommendation for this course.

We cannot provide any support for Docker Desktop for Linux as of now because of all of its issues.

We will be closely monitoring the issues threads of these libraries and will update the guidance here when appropriate.

//

Note About Docker Build Output and Buildkit
In the next lecture, we will be building a Docker image of our Posts service. Students who have the most recent versions of Docker will now have "Buildkit" enabled by default. If so, you will notice a slightly different output in your terminal when building from a Dockerfile.

The main difference for students will be the final step in the build process. As shown in the lecture the last step would say:

---> fc60771eaa08
Successfully Built fc60771eaa08

Now, with Buildkit, the final step would say:

=> => exporting layers  
 => => writing image sha256:ee59c34ada9890ca09145cc88ccb25d32b677fc3b61e921 0.0s

Both fc60771eaa08 and ee59c34ada9890ca09145cc88ccb25d32b677fc3b61e921 are the resulting image ID's that you would use to run a container.

eg:

docker run fc60771eaa08
or

docker run ee59c34ada9890ca09145cc88ccb25d32b677fc3b61e921

Disabling Buildkit to match course output

If you wish to disable the Buildkit feature so that you can more accurately follow along with the course, do the following:

Click the Docker Icon your systray

Select "Preferences"

Select "Docker Engine"

Change buildkit from true to false

{
"features": {
"buildkit": false
},
"experimental": false
}
Apply and Restart.

Buildkit Features and Documentation

If you want to learn more about features Buildkit has to offer, please check out the following pages:

https://docs.docker.com/develop/develop-images/build_enhancements/

https://docs.docker.com/engine/reference/commandline/build/#specifying-external-cache-sources

https://www.docker.com/blog/advanced-dockerfiles-faster-builds-and-smaller-images-using-buildkit-and-multistage-builds/

//

IMPORTANT Note for Minikube and MicroK8s Users
Minikube Users
This note only pertains to students who have decided to use Minikube instead of Docker Desktop's built-in Kubernetes.

Recent versions of Minikube will use the docker driver by default when you run minikube start. On Windows or macOS, the docker driver is not compatible with an ingress, which we will be using throughout the course.

https://minikube.sigs.k8s.io/docs/drivers/docker/#known-issues

https://github.com/kubernetes/minikube/issues/7332

macOS

We highly recommend macOS students use Docker Desktop's Kubernetes instead of Minikube. If you must use Minikube or prefer to use it, you can pass the --driver flag with a specific driver or --vm=true

minikube start --vm=true

minikube start --driver=hyperkit

minikube start --driver=virtualbox

Windows

Windows students should be using Docker Desktop with WSL2 and not Minikube. A VM driver will not work since it would require virtualization that is in conflict with WSL2.

MicroK8s Users
This course does not support the use of MicroK8s and will likely not work in the way that is presented. We highly suggest the use of Docker Desktop for macOS and Windows users and Minikube for Linux users. If you choose to use MicroK8s you will need to do your own research and refactoring to resolve the issues that may arise.

//

ErrImagePull, ErrImageNeverPull and ImagePullBackoff Errors
If your pods are showing ErrImagePull, ErrImageNeverPull, or ImagePullBackOff errors after running kubectl apply, the simplest solution is to provide an imagePullPolicy to the pod.

First, run kubectl delete -f infra/k8s/

Then, update your pod manifest:

spec:
containers: - name: posts
image: cygnet/posts:0.0.1
imagePullPolicy: Never
Then, run kubectl apply -f infra/k8s/

This will ensure that Kubernetes will use the image built locally from your image cache instead of attempting to pull from a registry.

Minikube Users:

If you are using a vm driver, you will need to tell Kubernetes to use the Docker daemon running inside of the single node cluster instead of the host.

Run the following command:

eval $(minikube docker-env)

Note - This command will need to be repeated anytime you close and restart the terminal session.

Afterward, you can build your image:

docker build -t USERNAME/REPO .

Update, your pod manifest as shown above and then run:

kubectl apply -f infra/k8s/

https://minikube.sigs.k8s.io/docs/commands/docker-env/

//
Important - DO NOT SKIP - Ingress Nginx Installation Info
In the upcoming lecture, we will be installing Ingress Nginx. In the video, it is shown that there is a required mandatory command that needed to be run for all providers. This has since been removed, so, the provider-specific commands (Docker Desktop, Minikube, etc) are all that is required. Many students are incorrectly installing the wrong library and are meeting errors and issues. Please triple-check that you are installing Ingress Nginx and not Nginx Ingress, which is a totally different and incompatible library.

Note - Windows students should be using Docker Desktop with WSL2 and not Minikube. The Minikube instructions provided below are intended for Linux users only.

Installation - Docker Desktop (macOS and Windows WSL2)

https://kubernetes.github.io/ingress-nginx/deploy/#quick-start

Installation - Minikube (Linux)

https://kubernetes.github.io/ingress-nginx/deploy/#minikube

//

Ingress v1 API Required Update
When running kubectl apply in the upcoming lecture, you may encounter a warning or error about the v1beta1 API version that is being used.

The v1 Ingress API is now required as of Kubernetes v1.22 and the v1beta1 will no longer work.

Only a few very minor changes are needed:

https://kubernetes.io/docs/concepts/services-networking/ingress/

Notably, a pathType needs to be added, and how we specify the backend service name and port has changed:

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
name: ingress-srv
annotations:
kubernetes.io/ingress.class: nginx
spec:
rules: - host: posts.com
http:
paths: - path: /posts
pathType: Prefix
backend:
service:
name: posts-clusterip-srv
port:
number: 4000
The zip resources attached to each lecture will contain the updated v1 API Ingress code if you need it.

//

Important Note About Port 80
In the upcoming lecture, we will be editing our hosts file so that we can access posts.com/posts in our browser. If you are unable to access the application you may have something already running on port 80, which is the default port for the ingress. Before doing anything, please make sure you have properly installed the ingress-nginx controller for your particular Kubernetes client. Many students are skipping this step!

https://www.udemy.com/course/microservices-with-node-js-and-react/learn/lecture/26492690#questions

Once you have confirmed that you have indeed installed/enabled the ingress-nginx controller, you'll need to identify if something is running on port 80 and shut it down. Some students have even had applications from other courses or personal projects still running. For Windows Pro users, both SQL Server Reporting Services (MSSQLSERVER) and the World Wide Web Publishing Service / IIS Server have been the most common services causing a conflict.

To determine what might be using this port, in your terminal run:

Windows
Using Powershell with elevated permissions:

netstat -anb

Scroll to the top of the returned output and find the listing for port 80. If Docker is properly listening on port 80 you should see:

TCP   0.0.0.0:80   0.0.0.0:0   LISTENING

[com.docker.backend.exe]

If something else is listed for TCP 0.0.0.0:80, you'll need to shut that service down.

macOS
sudo lsof -i tcp:80

If Docker is properly listening on port 80 you should see something very similar:

COMMAND    PID USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME

com.docke 8263 user  113u  IPv6 0xa20e89998489120d      0t0  TCP *:http (LISTEN)

If something else is listed for TCP *:http, you'll need to shut that service down.



Note - Minikube users on Windows and macOS should also make sure that they aren't using the docker driver which is not compatible with an ingress as noted here:

https://www.udemy.com/course/microservices-with-node-js-and-react/learn/lecture/23145358#questions

//


Important Note to Add Environment Variable
Please don't skip this! You must make a small change to get a step shown in the next video to work correctly!

The next video is going to show the deployment of the React app to our Kubernetes cluster. The React app will be running in a Docker container.

Unfortunately, create-react-app currently has two bugs that prevent it from running correctly in a docker container:

https://github.com/facebook/create-react-app/issues/8688

https://github.com/facebook/create-react-app/issues/11779

To solve this, we have to add two environment variables to the Dockerfile in the client folder. Find the Dockerfile in the client folder and make the following change:

FROM node:16-alpine

# Add the following lines

ENV CI=true
ENV WDS_SOCKET_PORT=0

WORKDIR /app
COPY package.json ./
RUN npm install
COPY ./ ./

CMD ["npm", "start"]
Then save the file. That's it! Continue on to the next video.

//


